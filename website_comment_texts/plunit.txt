https://eu.swi-prolog.org/pldoc/doc_for?object=section(%27packages/plunit.html%27)

## Test cases are your track bed through the swampland 

You do not want to haphazardly enter various queries on the toplevel to see whether everything is working after the latest change. Of course not!

Compared to imperative programs, and even functional programs, a predicate call can perform in "several different modes" (unless you stick to functional style, which may be good practice in certain cases). There is practically no typing that can be used as guardrail, additionally a variable can appear unbound when you don't expect it and for added complication unification makes data flow bidirectionally between terms in one statement. A lot of elementary operations can be performed in a very little amount of code and you are bound to miss a number of edge cases. 

With test cases, you can make sure both edge cases and standard cases are covered, lead to expected behaviour and stay covered while you add features and execution paths. 

The infrastructure supports having test code in [separate files](https://eu.swi-prolog.org/pldoc/man?section=testfiles) terminating in `.plt` instead of `.pl` and to load them with load_test_files/1 - very convenient!

## Some examples

[`tests_demonstrating_units_tests.pl`](https://github.com/dtonhofer/prolog_notes/blob/master/code_unit_tests/simplest/tests_demonstrating_units_tests.pl)

## Suggestions (IMHO)

**Use a good explanatory string to label your test case, instead of an obscure atomic label:**

==
test("no redo, choicepoint left open") :- throw_on_redo(1).
==   

instead of

==
test(one) :- throw_on_redo(1).
==

**If the test expression gets complex, move it out of the head and build it in the body:**

(Of course, sometimes you don't have such an expression, e.g. if you test `var(X)`)
   
==
test("collect them yourself, built a test expression, test in the head", [true(T)]) :-   
   bagof(X,nondeterminism(X),Bag),
   T = (Bag == [1,2]).
==

## Usefully interwork with assertions

See https://eu.swi-prolog.org/pldoc/man?section=testassertion

You can have multiple assertions in a test body which do fail the test but do not break off computation (unlike in non-test code):

==
:- debug(assertion_info).
  
:- begin_tests(assertion_test).

test(0) :-
   assertion(true),
   debug(assertion_info,"Now past succeeded assertion",[]).

test(1) :-
   assertion(false),
   debug(assertion_info,"Now past single failed assertion",[]).

test(2) :-
   X = 2,
   assertion(float(X)),
   assertion(X > 3),
   debug(assertion_info,"Now past two failed assertions",[]).

:- end_tests(assertion_test).
==

Then

==
?- run_tests.
% PL-Unit: assertion_test 
% Now past succeeded assertion
.
ERROR: /home/user/test_assertion.pl:9:
        test 1: assertion failed
        Assertion: false
% Now past single failed assertion
A
ERROR: /home/user/test_assertion.pl:13:
        test 2: assertion failed
        Assertion: float(2)
ERROR: /home/user/test_assertion.pl:13:
        test 2: assertion failed
        Assertion: 2>3
% Now past two failed assertions
A done
% 3 assertions failed
% 2 tests failed
% 1 tests passed
false.
==

## Good to read: Why `==` instead of `=` is preferable

https://swi-prolog.discourse.group/t/little-testing-tip/1371

## Special magic is this box

Note that this does not obey usual Prolog semantics:

==
test(two_all,all(M=[1,1])) :- member(M,[1,1,3]),M=1.
==

I suppose the right-hand side is wrapped in a findall/3 of M. 

## If your test fails your bindings will be trashed ... d'oh!

==
test(one,[error(Formal)]) :-    % this catches the exception term thrown by must_be/2
   Formal = domain_error(_,_),  % this is not thrown by the next instruction
   must_be(integer,foo).
==

This test succeeds, even though `domain_error(_,_)` is not thrown by `must_be/2`,
and so (at first sight) is not expected to be caught.

However, the failure rolls back the binding to T.... so the `catch` catches anything.

## Some notes on loading modules and the corresponding plunit tests

Module code can be found in `.pl` files, whereas the correspond plunit test blocks can be found in `.plt` files having the same "root filename": `foo.pl` and `foo.plt`. Here are some notes on this: [`load_and_test_script.pl`](https://github.com/dtonhofer/prolog_notes/blob/master/code/load_and_test_script.pl)

## Possible improvements

The test identifier (1st arg to test/1 or test/2) should be available in the test body. Sometimes one wants to call debug/3 to print something and having identifier would be great. But Prolog doesn't directly cater for such a possibility...

## See also

The [TAP (Test Anything Protocol)](http://testanything.org/), where the philosophy is that tests generate structured output to be postprocessed by the test harness.

An implementation can be found in [package "tap"](https://www.swi-prolog.org/pack/list?p=tap)

## A note on modules

"In the current system, test units are compiled into sub-modules of the module in which they appear." actually sounds wrong. 

AFAIK, there are no "submodules" in the current SWI-Prolog implementation, only modules.

The test are compiled into (top level) modules named after the plunit block:

==
:-begin_tests(footest).
:-end_tests(footest).
==

Creates a new module `plunit_footest`. Apparently every predicate in the plunit block is exported (?)

Special consequence: If you want external meta-predicates not declared as meta-predicates to call predicates inside he plunit block by name, you must "guess the plunit module name" and qualify the predicate name so that the caller can resolve it:
 
==
% With meta_predicate declaration!

:- meta_predicate(collect_metapredicate(0)).
collect_metapredicate(Collector) :- call(Collector).

% Without meta_predicate declaration!

collect_vanilla(Collector) :- call(Collector).

% ---
% The code below will be compiled into module plunit_footest
% ---

:- begin_tests(footest).

helper(X) :- 
   member(X,[1,2,3]).

% The predicate (term) given to bagof/3 does not need qualification:

test("call me, bagof/3!", true(Bag == [1,2,3])) :- 
   bagof(X,helper(X),Bag). 

% A term which is given to a metapredicate that has not been declared as such
% needs qualification by the (guessed) name of the plunit module:

test("call me, collect_vanilla/1", [true(X == 1),nondet]) :- 
   collect_vanilla(plunit_footest:helper(X)). 

% A term which is given to a metapredicate that has been properly declared
% as such (on the correct argument position of course) does not need qualification:

test("call me", [true(X == 1),nondet]) :- 
   collect_metapredicate(helper(X)). 

:- end_tests(footest).
==

## See also

From: https://stackoverflow.com/questions/65844487/unit-testing-in-gnu-prolog

   - [Crisp - Crazy Simple Unit Testing in Prolog](https://github.com/khueue/crisp)
   - [Logtalk's `lgunit`](https://logtalk.org/manuals/devtools/lgtunit.html)



